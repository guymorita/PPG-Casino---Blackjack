// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      _ref = App.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    App.prototype.initialize = function() {
      this.set('stack', new Stack({
        model: this
      }));
      return this.newGame();
    };

    App.prototype.newGame = function() {
      var deck,
        _this = this;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.get('playerHand').on('playerDouble', function() {
        if (_this.get('stack').get('curBet') * 2 <= _this.get('stack').get('chipStack')) {
          _this.get('playerHand').hit();
          _this.get('stack').set('curBet', _this.get('stack').get('curBet') * 2);
          return _this.endGame();
        } else {
          return alert("You don't have enough chips to double down");
        }
      });
      this.get('playerHand').on('playerHit', function() {
        if (_this.get('playerHand').scores()[0] > 21) {
          return _this.endGame();
        }
      });
      return this.get('playerHand').on('playerStand', function() {
        return _this.endGame();
      });
    };

    App.prototype.endGame = function() {
      var dealerScore, playerScore;
      this.get('dealerHand').models[0].flip();
      while (this.get('dealerHand').scores()[0] < 16) {
        this.get('dealerHand').hit();
      }
      playerScore = this.highestValidHand(this.get('playerHand'));
      dealerScore = this.highestValidHand(this.get('dealerHand'));
      this.currentStack = this.get('stack').get('chipStack');
      this.currentBet = this.get('stack').get('curBet');
      if (dealerScore > 21 && playerScore < 22) {
        this.youWin();
      } else if (playerScore > 21) {
        this.youLose();
      } else if (playerScore > dealerScore) {
        this.youWin();
      } else {
        this.youLose();
      }
      return this.newGame();
    };

    App.prototype.youLose = function() {
      this.get('stack').set('chipStack', this.currentStack - this.currentBet);
      this.get('stack').set('curBet', 0);
      this.get('stack').set('betSet', false);
      return alert("You lose!");
    };

    App.prototype.youWin = function() {
      this.get('stack').set('chipStack', this.currentStack + this.currentBet);
      this.get('stack').set('curBet', 0);
      this.get('stack').set('betSet', false);
      return alert("You Win!");
    };

    App.prototype.highestValidHand = function(obj) {
      var scoresArray;
      scoresArray = obj.scores();
      if (scoresArray[1] <= 21) {
        return scoresArray[1];
      } else {
        return scoresArray[0];
      }
    };

    return App;

  })(Backbone.Model);

}).call(this);

/*
//@ sourceMappingURL=App.map
*/
